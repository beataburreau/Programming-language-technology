-- Haskell module generated by the BNF converter

module CMM.Skel where

import qualified CMM.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: CMM.Abs.Id -> Result
transId x = case x of
  CMM.Abs.Id string -> failure x
transProgram :: CMM.Abs.Program -> Result
transProgram x = case x of
  CMM.Abs.PDefs defs -> failure x
transDef :: CMM.Abs.Def -> Result
transDef x = case x of
  CMM.Abs.DFun type_ id args stms -> failure x
transArg :: CMM.Abs.Arg -> Result
transArg x = case x of
  CMM.Abs.ADecl type_ id -> failure x
transStm :: CMM.Abs.Stm -> Result
transStm x = case x of
  CMM.Abs.SExp exp -> failure x
  CMM.Abs.SDecls type_ ids -> failure x
  CMM.Abs.SInit type_ id exp -> failure x
  CMM.Abs.SReturn exp -> failure x
  CMM.Abs.SWhile exp stm -> failure x
  CMM.Abs.SBlock stms -> failure x
  CMM.Abs.SIfElse exp stm1 stm2 -> failure x
transExp :: CMM.Abs.Exp -> Result
transExp x = case x of
  CMM.Abs.EBool boollit -> failure x
  CMM.Abs.EInt integer -> failure x
  CMM.Abs.EDouble double -> failure x
  CMM.Abs.EId id -> failure x
  CMM.Abs.EApp id exps -> failure x
  CMM.Abs.EPost id incdecop -> failure x
  CMM.Abs.EPre incdecop id -> failure x
  CMM.Abs.EMul exp1 mulop exp2 -> failure x
  CMM.Abs.EAdd exp1 addop exp2 -> failure x
  CMM.Abs.ECmp exp1 cmpop exp2 -> failure x
  CMM.Abs.EAnd exp1 exp2 -> failure x
  CMM.Abs.EOr exp1 exp2 -> failure x
  CMM.Abs.EAss id exp -> failure x
transIncDecOp :: CMM.Abs.IncDecOp -> Result
transIncDecOp x = case x of
  CMM.Abs.OInc -> failure x
  CMM.Abs.ODec -> failure x
transMulOp :: CMM.Abs.MulOp -> Result
transMulOp x = case x of
  CMM.Abs.OTimes -> failure x
  CMM.Abs.ODiv -> failure x
transAddOp :: CMM.Abs.AddOp -> Result
transAddOp x = case x of
  CMM.Abs.OPlus -> failure x
  CMM.Abs.OMinus -> failure x
transCmpOp :: CMM.Abs.CmpOp -> Result
transCmpOp x = case x of
  CMM.Abs.OLt -> failure x
  CMM.Abs.OGt -> failure x
  CMM.Abs.OLtEq -> failure x
  CMM.Abs.OGtEq -> failure x
  CMM.Abs.OEq -> failure x
  CMM.Abs.ONEq -> failure x
transBoolLit :: CMM.Abs.BoolLit -> Result
transBoolLit x = case x of
  CMM.Abs.LTrue -> failure x
  CMM.Abs.LFalse -> failure x
transType :: CMM.Abs.Type -> Result
transType x = case x of
  CMM.Abs.Type_bool -> failure x
  CMM.Abs.Type_int -> failure x
  CMM.Abs.Type_double -> failure x
  CMM.Abs.Type_void -> failure x

