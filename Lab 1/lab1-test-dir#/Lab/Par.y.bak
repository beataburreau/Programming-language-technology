-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Lab.Par where
import qualified Lab.Abs
import Lab.Lex
}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pBody Body
%name pListStm ListStm
%name pType Type
%name pArg Arg
%name pSpec Spec
%name pAId AId
%name pId Id
%name pStm Stm
%name pListId ListId
%name pExp15 Exp15
%name pExp10 Exp10
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp8 Exp8
%name pExp9 Exp9
%name pExp11 Exp11
%name pExp12 Exp12
%name pExp13 Exp13
%name pExp14 Exp14
%name pConst Const
%name pListIdent ListIdent
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  '::' { PT _ (TS _ 4) }
  ';' { PT _ (TS _ 5) }
  '<<' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  '>>' { PT _ (TS _ 8) }
  'bool' { PT _ (TS _ 9) }
  'char' { PT _ (TS _ 10) }
  'const' { PT _ (TS _ 11) }
  'double' { PT _ (TS _ 12) }
  'int' { PT _ (TS _ 13) }
  'return' { PT _ (TS _ 14) }
  'void' { PT _ (TS _ 15) }
  '{' { PT _ (TS _ 16) }
  '}' { PT _ (TS _ 17) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_charac { PT _ (TC $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident :: { Lab.Abs.Ident}
Ident  : L_Ident { Lab.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ($1)) :: Double }

Char    :: { Char }
Char     : L_charac { (read ($1)) :: Char }

String  :: { String }
String   : L_quoted { $1 }

Program :: { Lab.Abs.Program }
Program : ListDef { Lab.Abs.PDefs $1 }

ListDef :: { [Lab.Abs.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Def :: { Lab.Abs.Def }
Def : Type Ident '(' ListArg ')' Body { Lab.Abs.DFunc $1 $2 $4 $6 }
    | Const { Lab.Abs.DConst $1 }

ListArg :: { [Lab.Abs.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Body :: { Lab.Abs.Body }
Body : '{' ListStm '}' { Lab.Abs.FBody $2 } | ';' { Lab.Abs.EBody }

ListStm :: { [Lab.Abs.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Type :: { Lab.Abs.Type }
Type : 'int' { Lab.Abs.TInt }
     | 'bool' { Lab.Abs.TBool }
     | 'char' { Lab.Abs.TChar }
     | 'double' { Lab.Abs.TDouble }
     | 'void' { Lab.Abs.TVoid }
     | Const { Lab.Abs.TConst $1 }

Arg :: { Lab.Abs.Arg }
Arg : Spec Type AId { Lab.Abs.ADecl $1 $2 $3 }

Spec :: { Lab.Abs.Spec }
Spec : 'const' { Lab.Abs.CSpec } | {- empty -} { Lab.Abs.ESpec }

AId :: { Lab.Abs.AId }
AId : Id { Lab.Abs.SId $1 } | {- empty -} { Lab.Abs.EId }

Id :: { Lab.Abs.Id }
Id : Ident { Lab.Abs.VDecl $1 }
   | Ident '=' Exp { Lab.Abs.VInit $1 $3 }

Stm :: { Lab.Abs.Stm }
Stm : Exp ';' { Lab.Abs.SExp $1 }
    | Spec Type ListId ';' { Lab.Abs.SDecl $1 $2 $3 }
    | 'return' Exp ';' { Lab.Abs.SRet $2 }
    | '{' ListStm '}' { Lab.Abs.SBlock $2 }

ListId :: { [Lab.Abs.Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }

Exp15 :: { Lab.Abs.Exp }
Exp15 : Integer { Lab.Abs.EInt $1 }
      | Double { Lab.Abs.EDouble $1 }
      | Char { Lab.Abs.EChar $1 }
      | String { Lab.Abs.EString $1 }
      | '(' Exp ')' { $2 }
      | Const { Lab.Abs.EConst $1 }

Exp10 :: { Lab.Abs.Exp }
Exp10 : Exp8 '<<' Exp9 { Lab.Abs.ELShift $1 $3 }
      | Exp8 '>>' Exp9 { Lab.Abs.ERShift $1 $3 }
      | Exp11 { $1 }

Exp :: { Lab.Abs.Exp }
Exp : Exp1 { $1 }

Exp1 :: { Lab.Abs.Exp }
Exp1 : Exp2 { $1 }

Exp2 :: { Lab.Abs.Exp }
Exp2 : Exp3 { $1 }

Exp3 :: { Lab.Abs.Exp }
Exp3 : Exp4 { $1 }

Exp4 :: { Lab.Abs.Exp }
Exp4 : Exp5 { $1 }

Exp5 :: { Lab.Abs.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { Lab.Abs.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { Lab.Abs.Exp }
Exp7 : Exp8 { $1 }

Exp8 :: { Lab.Abs.Exp }
Exp8 : Exp9 { $1 }

Exp9 :: { Lab.Abs.Exp }
Exp9 : Exp10 { $1 }

Exp11 :: { Lab.Abs.Exp }
Exp11 : Exp12 { $1 }

Exp12 :: { Lab.Abs.Exp }
Exp12 : Exp13 { $1 }

Exp13 :: { Lab.Abs.Exp }
Exp13 : Exp14 { $1 }

Exp14 :: { Lab.Abs.Exp }
Exp14 : Exp15 { $1 }

Const :: { Lab.Abs.Const }
Const : ListIdent { Lab.Abs.QConst $1 }

ListIdent :: { [Lab.Abs.Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident '::' ListIdent { (:) $1 $3 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

