{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Lab.
--   Generated by the BNF converter.

module Lab.Print where

import qualified Lab.Abs
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Lab.Abs.Ident where
  prt _ (Lab.Abs.Ident i) = doc $ showString $ i
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "::"), prt 0 xs]

instance Print Lab.Abs.Program where
  prt i e = case e of
    Lab.Abs.PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print [Lab.Abs.Def] where
  prt = prtList

instance Print Lab.Abs.Def where
  prt i e = case e of
    Lab.Abs.DFunc type_ id args body -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 body])
    Lab.Abs.DConst const -> prPrec i 0 (concatD [prt 0 const])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Lab.Abs.Arg] where
  prt = prtList

instance Print Lab.Abs.Body where
  prt i e = case e of
    Lab.Abs.FBody stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    Lab.Abs.EBody -> prPrec i 0 (concatD [doc (showString ";")])

instance Print [Lab.Abs.Stm] where
  prt = prtList

instance Print Lab.Abs.Type where
  prt i e = case e of
    Lab.Abs.TInt -> prPrec i 0 (concatD [doc (showString "int")])
    Lab.Abs.TBool -> prPrec i 0 (concatD [doc (showString "bool")])
    Lab.Abs.TChar -> prPrec i 0 (concatD [doc (showString "char")])
    Lab.Abs.TDouble -> prPrec i 0 (concatD [doc (showString "double")])
    Lab.Abs.TVoid -> prPrec i 0 (concatD [doc (showString "void")])
    Lab.Abs.TConst const -> prPrec i 0 (concatD [prt 0 const])

instance Print Lab.Abs.Arg where
  prt i e = case e of
    Lab.Abs.ADecl spec type_ aid -> prPrec i 0 (concatD [prt 0 spec, prt 0 type_, prt 0 aid])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Lab.Abs.Spec where
  prt i e = case e of
    Lab.Abs.CSpec -> prPrec i 0 (concatD [doc (showString "const")])
    Lab.Abs.ESpec -> prPrec i 0 (concatD [])

instance Print Lab.Abs.AId where
  prt i e = case e of
    Lab.Abs.SId id -> prPrec i 0 (concatD [prt 0 id])
    Lab.Abs.EId -> prPrec i 0 (concatD [])

instance Print Lab.Abs.Id where
  prt i e = case e of
    Lab.Abs.VDecl id -> prPrec i 0 (concatD [prt 0 id])
    Lab.Abs.VInit id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Lab.Abs.Stm where
  prt i e = case e of
    Lab.Abs.SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    Lab.Abs.SDecl spec type_ ids -> prPrec i 0 (concatD [prt 0 spec, prt 0 type_, prt 0 ids, doc (showString ";")])
    Lab.Abs.SRet exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    Lab.Abs.SBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Lab.Abs.Id] where
  prt = prtList

instance Print Lab.Abs.Exp where
  prt i e = case e of
    Lab.Abs.EInt n -> prPrec i 15 (concatD [prt 0 n])
    Lab.Abs.EDouble d -> prPrec i 15 (concatD [prt 0 d])
    Lab.Abs.EChar c -> prPrec i 15 (concatD [prt 0 c])
    Lab.Abs.EString str -> prPrec i 15 (concatD [prt 0 str])
    Lab.Abs.ELShift exp1 exp2 -> prPrec i 10 (concatD [prt 8 exp1, doc (showString "<<"), prt 9 exp2])
    Lab.Abs.ERShift exp1 exp2 -> prPrec i 10 (concatD [prt 8 exp1, doc (showString ">>"), prt 9 exp2])
    Lab.Abs.EConst const -> prPrec i 15 (concatD [prt 0 const])

instance Print Lab.Abs.Const where
  prt i e = case e of
    Lab.Abs.QConst ids -> prPrec i 0 (concatD [prt 0 ids])

instance Print [Lab.Abs.Ident] where
  prt = prtList

