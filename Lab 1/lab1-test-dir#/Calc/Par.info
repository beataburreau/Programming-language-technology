-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Calc/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pProgram1 -> Program1                       (3)
	%start_pProgram2 -> Program2                       (4)
	Integer -> L_integ                                 (5)
	Program -> Program '+' Exp1                        (6)
	Program -> Program '-' Exp1                        (7)
	Program -> Program1                                (8)
	Exp1 -> Exp1 '*' Exp2                              (9)
	Exp1 -> Exp1 '/' Exp2                              (10)
	Exp2 -> Integer                                    (11)
	Program1 -> Program2                               (12)
	Program2 -> '(' Program ')'                        (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'/'            { PT _ (TS _ 6) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pProgram1 rule  3
	%start_pProgram2 rule  4
	Integer         rule  5
	Program         rules 6, 7, 8
	Exp1            rules 9, 10
	Exp2            rule  11
	Program1        rule  12
	Program2        rule  13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 8

	Program        goto state 14
	Program1       goto state 15
	Program2       goto state 10

State 1



	Exp1           goto state 13

State 2


	L_integ        shift, and enter state 6

	Integer        goto state 11
	Exp2           goto state 12

State 3


	'('            shift, and enter state 8

	Program1       goto state 9
	Program2       goto state 10

State 4


	'('            shift, and enter state 8

	Program2       goto state 7

State 5


	L_integ        shift, and enter state 6


State 6

	Integer -> L_integ .                                (rule 5)

	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'/'            reduce using rule 5
	%eof           reduce using rule 5


State 7

	%start_pProgram2 -> Program2 .                      (rule 4)

	%eof           accept


State 8

	Program2 -> '(' . Program ')'                       (rule 13)

	'('            shift, and enter state 8

	Program        goto state 20
	Program1       goto state 15
	Program2       goto state 10

State 9

	%start_pProgram1 -> Program1 .                      (rule 3)

	%eof           accept


State 10

	Program1 -> Program2 .                              (rule 12)

	')'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	%eof           reduce using rule 12


State 11

	Exp2 -> Integer .                                   (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'/'            reduce using rule 11
	%eof           reduce using rule 11


State 12

	%start_pExp2 -> Exp2 .                              (rule 2)

	%eof           accept


State 13

	%start_pExp1 -> Exp1 .                              (rule 1)
	Exp1 -> Exp1 . '*' Exp2                             (rule 9)
	Exp1 -> Exp1 . '/' Exp2                             (rule 10)

	'*'            shift, and enter state 18
	'/'            shift, and enter state 19
	%eof           accept


State 14

	%start_pProgram -> Program .                        (rule 0)
	Program -> Program . '+' Exp1                       (rule 6)
	Program -> Program . '-' Exp1                       (rule 7)

	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	%eof           accept


State 15

	Program -> Program1 .                               (rule 8)

	')'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	%eof           reduce using rule 8


State 16

	Program -> Program '+' . Exp1                       (rule 6)


	Exp1           goto state 25

State 17

	Program -> Program '-' . Exp1                       (rule 7)


	Exp1           goto state 24

State 18

	Exp1 -> Exp1 '*' . Exp2                             (rule 9)

	L_integ        shift, and enter state 6

	Integer        goto state 11
	Exp2           goto state 23

State 19

	Exp1 -> Exp1 '/' . Exp2                             (rule 10)

	L_integ        shift, and enter state 6

	Integer        goto state 11
	Exp2           goto state 22

State 20

	Program -> Program . '+' Exp1                       (rule 6)
	Program -> Program . '-' Exp1                       (rule 7)
	Program2 -> '(' Program . ')'                       (rule 13)

	')'            shift, and enter state 21
	'+'            shift, and enter state 16
	'-'            shift, and enter state 17


State 21

	Program2 -> '(' Program ')' .                       (rule 13)

	')'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	%eof           reduce using rule 13


State 22

	Exp1 -> Exp1 '/' Exp2 .                             (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'/'            reduce using rule 10
	%eof           reduce using rule 10


State 23

	Exp1 -> Exp1 '*' Exp2 .                             (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'/'            reduce using rule 9
	%eof           reduce using rule 9


State 24

	Program -> Program '-' Exp1 .                       (rule 7)
	Exp1 -> Exp1 . '*' Exp2                             (rule 9)
	Exp1 -> Exp1 . '/' Exp2                             (rule 10)

	')'            reduce using rule 7
	'*'            shift, and enter state 18
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'/'            shift, and enter state 19
	%eof           reduce using rule 7


State 25

	Program -> Program '+' Exp1 .                       (rule 6)
	Exp1 -> Exp1 . '*' Exp2                             (rule 9)
	Exp1 -> Exp1 . '/' Exp2                             (rule 10)

	')'            reduce using rule 6
	'*'            shift, and enter state 18
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'/'            shift, and enter state 19
	%eof           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 7
Number of non-terminals: 11
Number of states: 26
