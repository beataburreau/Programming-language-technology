-- Haskell module generated by the BNF converter

module Calc.Skel where

import qualified Calc.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transProgram :: Calc.Abs.Program -> Result
transProgram x = case x of
  Calc.Abs.EAdd program exp -> failure x
  Calc.Abs.ESub program exp -> failure x
transExp :: Calc.Abs.Exp -> Result
transExp x = case x of
  Calc.Abs.EMul exp1 exp2 -> failure x
  Calc.Abs.EDiv exp1 exp2 -> failure x
  Calc.Abs.EInt integer -> failure x

