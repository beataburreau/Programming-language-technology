-- Haskell module generated by the BNF converter

module SkelLab where

import qualified AbsLab

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLab.Ident -> Result
transIdent x = case x of
  AbsLab.Ident string -> failure x
transProgram :: AbsLab.Program -> Result
transProgram x = case x of
  AbsLab.PDefs defs -> failure x
transDef :: AbsLab.Def -> Result
transDef x = case x of
  AbsLab.DFunc type_ ident args body -> failure x
  AbsLab.DConst const -> failure x
transBody :: AbsLab.Body -> Result
transBody x = case x of
  AbsLab.FBody stms -> failure x
  AbsLab.EBody -> failure x
transType :: AbsLab.Type -> Result
transType x = case x of
  AbsLab.TInt -> failure x
  AbsLab.TBool -> failure x
  AbsLab.TChar -> failure x
  AbsLab.TDouble -> failure x
  AbsLab.TVoid -> failure x
  AbsLab.TConst const -> failure x
transArg :: AbsLab.Arg -> Result
transArg x = case x of
  AbsLab.ADecl spec type_ aid -> failure x
transSpec :: AbsLab.Spec -> Result
transSpec x = case x of
  AbsLab.CSpec -> failure x
  AbsLab.ESpec -> failure x
transAId :: AbsLab.AId -> Result
transAId x = case x of
  AbsLab.SId id -> failure x
  AbsLab.EId -> failure x
transId :: AbsLab.Id -> Result
transId x = case x of
  AbsLab.VDecl ident -> failure x
  AbsLab.VInit ident exp -> failure x
transStm :: AbsLab.Stm -> Result
transStm x = case x of
  AbsLab.SExp exp -> failure x
  AbsLab.SDecl spec type_ ids -> failure x
  AbsLab.SRet exp -> failure x
  AbsLab.SBlock stms -> failure x
transExp :: AbsLab.Exp -> Result
transExp x = case x of
  AbsLab.EInt integer -> failure x
  AbsLab.EDouble double -> failure x
  AbsLab.EChar char -> failure x
  AbsLab.EString string -> failure x
  AbsLab.ELShift exp1 exp2 -> failure x
  AbsLab.ERShift exp1 exp2 -> failure x
  AbsLab.EConst const -> failure x
transConst :: AbsLab.Const -> Result
transConst x = case x of
  AbsLab.QConst idents -> failure x

