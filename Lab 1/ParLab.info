-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParLab.y
-----------------------------------------------------------------------------

state 0 contains 6 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 6 contains 6 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 8 contains 1 reduce/reduce conflicts.
state 17 contains 1 shift/reduce conflicts.
state 19 contains 1 reduce/reduce conflicts.
state 22 contains 1 shift/reduce conflicts.
state 26 contains 1 reduce/reduce conflicts.
state 30 contains 1 shift/reduce conflicts.
state 41 contains 1 shift/reduce conflicts.
state 42 contains 1 shift/reduce conflicts.
state 62 contains 1 shift/reduce conflicts.
state 80 contains 2 reduce/reduce conflicts.
state 81 contains 2 reduce/reduce conflicts.

rule 7 is unused
rule 11 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	Double -> L_doubl                                  (3)
	Char -> L_charac                                   (4)
	String -> L_quoted                                 (5)
	Program -> ListDef                                 (6)
	ListDef ->                                         (7)
	ListDef -> Def ListDef                             (8)
	Def -> Type Ident '(' ListArg ')' Body             (9)
	Def -> Const                                       (10)
	ListArg ->                                         (11)
	ListArg -> Arg                                     (12)
	ListArg -> Arg ',' ListArg                         (13)
	Body -> '{' ListStm '}'                            (14)
	Body -> ';'                                        (15)
	ListStm ->                                         (16)
	ListStm -> Stm ListStm                             (17)
	Type -> 'int'                                      (18)
	Type -> 'bool'                                     (19)
	Type -> 'char'                                     (20)
	Type -> 'double'                                   (21)
	Type -> 'void'                                     (22)
	Type -> Const                                      (23)
	Arg -> Spec Type AId                               (24)
	Spec -> 'const'                                    (25)
	Spec ->                                            (26)
	AId -> Id                                          (27)
	AId ->                                             (28)
	Id -> Ident                                        (29)
	Id -> Ident '=' Exp                                (30)
	Stm -> Exp ';'                                     (31)
	Stm -> Spec Type ListId ';'                        (32)
	Stm -> 'return' Exp ';'                            (33)
	Stm -> '{' ListStm '}'                             (34)
	ListId -> Id                                       (35)
	ListId -> Id ',' ListId                            (36)
	Exp15 -> Integer                                   (37)
	Exp15 -> Double                                    (38)
	Exp15 -> Char                                      (39)
	Exp15 -> String                                    (40)
	Exp15 -> '(' Exp ')'                               (41)
	Exp15 -> Const                                     (42)
	Exp10 -> Exp8 '<<' Exp9                            (43)
	Exp10 -> Exp8 '>>' Exp9                            (44)
	Exp10 -> Exp11                                     (45)
	Exp -> Exp1                                        (46)
	Exp1 -> Exp2                                       (47)
	Exp2 -> Exp3                                       (48)
	Exp3 -> Exp4                                       (49)
	Exp4 -> Exp5                                       (50)
	Exp5 -> Exp6                                       (51)
	Exp6 -> Exp7                                       (52)
	Exp7 -> Exp8                                       (53)
	Exp8 -> Exp9                                       (54)
	Exp9 -> Exp10                                      (55)
	Exp11 -> Exp12                                     (56)
	Exp12 -> Exp13                                     (57)
	Exp13 -> Exp14                                     (58)
	Exp14 -> Exp15                                     (59)
	Const -> ListIdent                                 (60)
	ListIdent ->                                       (61)
	ListIdent -> Ident                                 (62)
	ListIdent -> Ident '::' ListIdent                  (63)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	'::'           { PT _ (TS _ 4) }
	';'            { PT _ (TS _ 5) }
	'<<'           { PT _ (TS _ 6) }
	'='            { PT _ (TS _ 7) }
	'>>'           { PT _ (TS _ 8) }
	'bool'         { PT _ (TS _ 9) }
	'char'         { PT _ (TS _ 10) }
	'const'        { PT _ (TS _ 11) }
	'double'       { PT _ (TS _ 12) }
	'int'          { PT _ (TS _ 13) }
	'return'       { PT _ (TS _ 14) }
	'void'         { PT _ (TS _ 15) }
	'{'            { PT _ (TS _ 16) }
	'}'            { PT _ (TS _ 17) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_doubl        { PT _ (TD $$) }
	L_charac       { PT _ (TC $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	Double          rule  3
	Char            rule  4
	String          rule  5
	Program         rule  6
	ListDef         rules 7, 8
	Def             rules 9, 10
	ListArg         rules 11, 12, 13
	Body            rules 14, 15
	ListStm         rules 16, 17
	Type            rules 18, 19, 20, 21, 22, 23
	Arg             rule  24
	Spec            rules 25, 26
	AId             rules 27, 28
	Id              rules 29, 30
	Stm             rules 31, 32, 33, 34
	ListId          rules 35, 36
	Exp15           rules 37, 38, 39, 40, 41, 42
	Exp10           rules 43, 44, 45
	Exp             rule  46
	Exp1            rule  47
	Exp2            rule  48
	Exp3            rule  49
	Exp4            rule  50
	Exp5            rule  51
	Exp6            rule  52
	Exp7            rule  53
	Exp8            rule  54
	Exp9            rule  55
	Exp11           rule  56
	Exp12           rule  57
	Exp13           rule  58
	Exp14           rule  59
	Const           rule  60
	ListIdent       rules 61, 62, 63

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'bool'         shift, and enter state 10
			(reduce using rule 61)

	'char'         shift, and enter state 11
			(reduce using rule 61)

	'double'       shift, and enter state 12
			(reduce using rule 61)

	'int'          shift, and enter state 13
			(reduce using rule 61)

	'void'         shift, and enter state 14
			(reduce using rule 61)

	L_Ident        shift, and enter state 2
			(reduce using rule 61)

	%eof           reduce using rule 61
			(reduce using rule 7)


	Ident          goto state 3
	Program        goto state 4
	ListDef        goto state 5
	Def            goto state 6
	Type           goto state 7
	Const          goto state 8
	ListIdent      goto state 9

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'::'           reduce using rule 1
	';'            reduce using rule 1
	'<<'           reduce using rule 1
	'='            reduce using rule 1
	'>>'           reduce using rule 1
	'bool'         reduce using rule 1
	'char'         reduce using rule 1
	'double'       reduce using rule 1
	'int'          reduce using rule 1
	'void'         reduce using rule 1
	L_Ident        reduce using rule 1
	%eof           reduce using rule 1


State 3

	ListIdent -> Ident .                                (rule 62)
	ListIdent -> Ident . '::' ListIdent                 (rule 63)

	')'            reduce using rule 62
	','            reduce using rule 62
	'::'           shift, and enter state 17
	';'            reduce using rule 62
	'<<'           reduce using rule 62
	'>>'           reduce using rule 62
	'bool'         reduce using rule 62
	'char'         reduce using rule 62
	'double'       reduce using rule 62
	'int'          reduce using rule 62
	'void'         reduce using rule 62
	L_Ident        reduce using rule 62
	%eof           reduce using rule 62


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	Program -> ListDef .                                (rule 6)

	%eof           reduce using rule 6


State 6

	ListDef -> Def . ListDef                            (rule 8)

	'bool'         shift, and enter state 10
			(reduce using rule 61)

	'char'         shift, and enter state 11
			(reduce using rule 61)

	'double'       shift, and enter state 12
			(reduce using rule 61)

	'int'          shift, and enter state 13
			(reduce using rule 61)

	'void'         shift, and enter state 14
			(reduce using rule 61)

	L_Ident        shift, and enter state 2
			(reduce using rule 61)

	%eof           reduce using rule 61
			(reduce using rule 7)


	Ident          goto state 3
	ListDef        goto state 16
	Def            goto state 6
	Type           goto state 7
	Const          goto state 8
	ListIdent      goto state 9

State 7

	Def -> Type . Ident '(' ListArg ')' Body            (rule 9)

	L_Ident        shift, and enter state 2

	Ident          goto state 15

State 8

	Def -> Const .                                      (rule 10)
	Type -> Const .                                     (rule 23)

	'bool'         reduce using rule 10
	'char'         reduce using rule 10
	'double'       reduce using rule 10
	'int'          reduce using rule 10
	'void'         reduce using rule 10
	L_Ident        reduce using rule 23
			(reduce using rule 10)

	%eof           reduce using rule 10


State 9

	Const -> ListIdent .                                (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60
	';'            reduce using rule 60
	'<<'           reduce using rule 60
	'>>'           reduce using rule 60
	'bool'         reduce using rule 60
	'char'         reduce using rule 60
	'double'       reduce using rule 60
	'int'          reduce using rule 60
	'void'         reduce using rule 60
	L_Ident        reduce using rule 60
	%eof           reduce using rule 60


State 10

	Type -> 'bool' .                                    (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	L_Ident        reduce using rule 19


State 11

	Type -> 'char' .                                    (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20
	L_Ident        reduce using rule 20


State 12

	Type -> 'double' .                                  (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21
	L_Ident        reduce using rule 21


State 13

	Type -> 'int' .                                     (rule 18)

	')'            reduce using rule 18
	','            reduce using rule 18
	L_Ident        reduce using rule 18


State 14

	Type -> 'void' .                                    (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22
	L_Ident        reduce using rule 22


State 15

	Def -> Type Ident . '(' ListArg ')' Body            (rule 9)

	'('            shift, and enter state 19


State 16

	ListDef -> Def ListDef .                            (rule 8)

	%eof           reduce using rule 8


State 17

	ListIdent -> Ident '::' . ListIdent                 (rule 63)

	')'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	'bool'         reduce using rule 61
	'char'         reduce using rule 61
	'double'       reduce using rule 61
	'int'          reduce using rule 61
	'void'         reduce using rule 61
	L_Ident        shift, and enter state 2
			(reduce using rule 61)

	%eof           reduce using rule 61

	Ident          goto state 3
	ListIdent      goto state 18

State 18

	ListIdent -> Ident '::' ListIdent .                 (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63
	';'            reduce using rule 63
	'<<'           reduce using rule 63
	'>>'           reduce using rule 63
	'bool'         reduce using rule 63
	'char'         reduce using rule 63
	'double'       reduce using rule 63
	'int'          reduce using rule 63
	'void'         reduce using rule 63
	L_Ident        reduce using rule 63
	%eof           reduce using rule 63


State 19

	Def -> Type Ident '(' . ListArg ')' Body            (rule 9)

	')'            reduce using rule 26
			(reduce using rule 11)

	','            reduce using rule 26
	'bool'         reduce using rule 26
	'char'         reduce using rule 26
	'const'        shift, and enter state 23
	'double'       reduce using rule 26
	'int'          reduce using rule 26
	'void'         reduce using rule 26
	L_Ident        reduce using rule 26

	ListArg        goto state 20
	Arg            goto state 21
	Spec           goto state 22

State 20

	Def -> Type Ident '(' ListArg . ')' Body            (rule 9)

	')'            shift, and enter state 27


State 21

	ListArg -> Arg .                                    (rule 12)
	ListArg -> Arg . ',' ListArg                        (rule 13)

	')'            reduce using rule 12
	','            shift, and enter state 26


State 22

	Arg -> Spec . Type AId                              (rule 24)

	')'            reduce using rule 61
	','            reduce using rule 61
	'bool'         shift, and enter state 10
	'char'         shift, and enter state 11
	'double'       shift, and enter state 12
	'int'          shift, and enter state 13
	'void'         shift, and enter state 14
	L_Ident        shift, and enter state 2
			(reduce using rule 61)


	Ident          goto state 3
	Type           goto state 24
	Const          goto state 25
	ListIdent      goto state 9

State 23

	Spec -> 'const' .                                   (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25
	'bool'         reduce using rule 25
	'char'         reduce using rule 25
	'double'       reduce using rule 25
	'int'          reduce using rule 25
	'void'         reduce using rule 25
	L_Ident        reduce using rule 25


State 24

	Arg -> Spec Type . AId                              (rule 24)

	')'            reduce using rule 28
	','            reduce using rule 28
	L_Ident        shift, and enter state 2

	Ident          goto state 32
	AId            goto state 33
	Id             goto state 34

State 25

	Type -> Const .                                     (rule 23)

	')'            reduce using rule 23
	','            reduce using rule 23
	L_Ident        reduce using rule 23


State 26

	ListArg -> Arg ',' . ListArg                        (rule 13)

	')'            reduce using rule 26
			(reduce using rule 11)

	','            reduce using rule 26
	'bool'         reduce using rule 26
	'char'         reduce using rule 26
	'const'        shift, and enter state 23
	'double'       reduce using rule 26
	'int'          reduce using rule 26
	'void'         reduce using rule 26
	L_Ident        reduce using rule 26

	ListArg        goto state 31
	Arg            goto state 21
	Spec           goto state 22

State 27

	Def -> Type Ident '(' ListArg ')' . Body            (rule 9)

	';'            shift, and enter state 29
	'{'            shift, and enter state 30

	Body           goto state 28

State 28

	Def -> Type Ident '(' ListArg ')' Body .            (rule 9)

	'bool'         reduce using rule 9
	'char'         reduce using rule 9
	'double'       reduce using rule 9
	'int'          reduce using rule 9
	'void'         reduce using rule 9
	L_Ident        reduce using rule 9
	%eof           reduce using rule 9


State 29

	Body -> ';' .                                       (rule 15)

	'bool'         reduce using rule 15
	'char'         reduce using rule 15
	'double'       reduce using rule 15
	'int'          reduce using rule 15
	'void'         reduce using rule 15
	L_Ident        reduce using rule 15
	%eof           reduce using rule 15


State 30

	Body -> '{' . ListStm '}'                           (rule 14)

	'('            shift, and enter state 60
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	'bool'         reduce using rule 26
	'char'         reduce using rule 26
	'const'        shift, and enter state 23
	'double'       reduce using rule 26
	'int'          reduce using rule 26
	'return'       shift, and enter state 61
	'void'         reduce using rule 26
	'{'            shift, and enter state 62
	'}'            reduce using rule 16
	L_Ident        shift, and enter state 2
			(reduce using rule 26)

	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	ListStm        goto state 40
	Spec           goto state 41
	Stm            goto state 42
	Exp15          goto state 43
	Exp10          goto state 44
	Exp            goto state 45
	Exp1           goto state 46
	Exp2           goto state 47
	Exp3           goto state 48
	Exp4           goto state 49
	Exp5           goto state 50
	Exp6           goto state 51
	Exp7           goto state 52
	Exp8           goto state 53
	Exp9           goto state 54
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 31

	ListArg -> Arg ',' ListArg .                        (rule 13)

	')'            reduce using rule 13


State 32

	Id -> Ident .                                       (rule 29)
	Id -> Ident . '=' Exp                               (rule 30)

	')'            reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	'='            shift, and enter state 35


State 33

	Arg -> Spec Type AId .                              (rule 24)

	')'            reduce using rule 24
	','            reduce using rule 24


State 34

	AId -> Id .                                         (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27


State 35

	Id -> Ident '=' . Exp                               (rule 30)

	'('            shift, and enter state 60
	')'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	Exp15          goto state 43
	Exp10          goto state 44
	Exp            goto state 76
	Exp1           goto state 46
	Exp2           goto state 47
	Exp3           goto state 48
	Exp4           goto state 49
	Exp5           goto state 50
	Exp6           goto state 51
	Exp7           goto state 52
	Exp8           goto state 53
	Exp9           goto state 54
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 36

	Exp15 -> Integer .                                  (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	'<<'           reduce using rule 37
	'>>'           reduce using rule 37


State 37

	Exp15 -> Double .                                   (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	'<<'           reduce using rule 38
	'>>'           reduce using rule 38


State 38

	Exp15 -> Char .                                     (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	'<<'           reduce using rule 39
	'>>'           reduce using rule 39


State 39

	Exp15 -> String .                                   (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	'<<'           reduce using rule 40
	'>>'           reduce using rule 40


State 40

	Body -> '{' ListStm . '}'                           (rule 14)

	'}'            shift, and enter state 75


State 41

	Stm -> Spec . Type ListId ';'                       (rule 32)

	'bool'         shift, and enter state 10
	'char'         shift, and enter state 11
	'double'       shift, and enter state 12
	'int'          shift, and enter state 13
	'void'         shift, and enter state 14
	L_Ident        shift, and enter state 2
			(reduce using rule 61)


	Ident          goto state 3
	Type           goto state 74
	Const          goto state 25
	ListIdent      goto state 9

State 42

	ListStm -> Stm . ListStm                            (rule 17)

	'('            shift, and enter state 60
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	'bool'         reduce using rule 26
	'char'         reduce using rule 26
	'const'        shift, and enter state 23
	'double'       reduce using rule 26
	'int'          reduce using rule 26
	'return'       shift, and enter state 61
	'void'         reduce using rule 26
	'{'            shift, and enter state 62
	'}'            reduce using rule 16
	L_Ident        shift, and enter state 2
			(reduce using rule 26)

	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	ListStm        goto state 73
	Spec           goto state 41
	Stm            goto state 42
	Exp15          goto state 43
	Exp10          goto state 44
	Exp            goto state 45
	Exp1           goto state 46
	Exp2           goto state 47
	Exp3           goto state 48
	Exp4           goto state 49
	Exp5           goto state 50
	Exp6           goto state 51
	Exp7           goto state 52
	Exp8           goto state 53
	Exp9           goto state 54
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 43

	Exp14 -> Exp15 .                                    (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	';'            reduce using rule 59
	'<<'           reduce using rule 59
	'>>'           reduce using rule 59


State 44

	Exp9 -> Exp10 .                                     (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	'<<'           reduce using rule 55
	'>>'           reduce using rule 55


State 45

	Stm -> Exp . ';'                                    (rule 31)

	';'            shift, and enter state 72


State 46

	Exp -> Exp1 .                                       (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46


State 47

	Exp1 -> Exp2 .                                      (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47


State 48

	Exp2 -> Exp3 .                                      (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48


State 49

	Exp3 -> Exp4 .                                      (rule 49)

	')'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49


State 50

	Exp4 -> Exp5 .                                      (rule 50)

	')'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50


State 51

	Exp5 -> Exp6 .                                      (rule 51)

	')'            reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51


State 52

	Exp6 -> Exp7 .                                      (rule 52)

	')'            reduce using rule 52
	','            reduce using rule 52
	';'            reduce using rule 52


State 53

	Exp10 -> Exp8 . '<<' Exp9                           (rule 43)
	Exp10 -> Exp8 . '>>' Exp9                           (rule 44)
	Exp7 -> Exp8 .                                      (rule 53)

	')'            reduce using rule 53
	','            reduce using rule 53
	';'            reduce using rule 53
	'<<'           shift, and enter state 70
	'>>'           shift, and enter state 71


State 54

	Exp8 -> Exp9 .                                      (rule 54)

	')'            reduce using rule 54
	','            reduce using rule 54
	';'            reduce using rule 54
	'<<'           reduce using rule 54
	'>>'           reduce using rule 54


State 55

	Exp10 -> Exp11 .                                    (rule 45)

	')'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	'<<'           reduce using rule 45
	'>>'           reduce using rule 45


State 56

	Exp11 -> Exp12 .                                    (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	'<<'           reduce using rule 56
	'>>'           reduce using rule 56


State 57

	Exp12 -> Exp13 .                                    (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	';'            reduce using rule 57
	'<<'           reduce using rule 57
	'>>'           reduce using rule 57


State 58

	Exp13 -> Exp14 .                                    (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	';'            reduce using rule 58
	'<<'           reduce using rule 58
	'>>'           reduce using rule 58


State 59

	Exp15 -> Const .                                    (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	'<<'           reduce using rule 42
	'>>'           reduce using rule 42


State 60

	Exp15 -> '(' . Exp ')'                              (rule 41)

	'('            shift, and enter state 60
	')'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	Exp15          goto state 43
	Exp10          goto state 44
	Exp            goto state 69
	Exp1           goto state 46
	Exp2           goto state 47
	Exp3           goto state 48
	Exp4           goto state 49
	Exp5           goto state 50
	Exp6           goto state 51
	Exp7           goto state 52
	Exp8           goto state 53
	Exp9           goto state 54
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 61

	Stm -> 'return' . Exp ';'                           (rule 33)

	'('            shift, and enter state 60
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	Exp15          goto state 43
	Exp10          goto state 44
	Exp            goto state 68
	Exp1           goto state 46
	Exp2           goto state 47
	Exp3           goto state 48
	Exp4           goto state 49
	Exp5           goto state 50
	Exp6           goto state 51
	Exp7           goto state 52
	Exp8           goto state 53
	Exp9           goto state 54
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 62

	Stm -> '{' . ListStm '}'                            (rule 34)

	'('            shift, and enter state 60
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	'bool'         reduce using rule 26
	'char'         reduce using rule 26
	'const'        shift, and enter state 23
	'double'       reduce using rule 26
	'int'          reduce using rule 26
	'return'       shift, and enter state 61
	'void'         reduce using rule 26
	'{'            shift, and enter state 62
	'}'            reduce using rule 16
	L_Ident        shift, and enter state 2
			(reduce using rule 26)

	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	ListStm        goto state 67
	Spec           goto state 41
	Stm            goto state 42
	Exp15          goto state 43
	Exp10          goto state 44
	Exp            goto state 45
	Exp1           goto state 46
	Exp2           goto state 47
	Exp3           goto state 48
	Exp4           goto state 49
	Exp5           goto state 50
	Exp6           goto state 51
	Exp7           goto state 52
	Exp8           goto state 53
	Exp9           goto state 54
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 63

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	'<<'           reduce using rule 2
	'>>'           reduce using rule 2


State 64

	Double -> L_doubl .                                 (rule 3)

	')'            reduce using rule 3
	','            reduce using rule 3
	';'            reduce using rule 3
	'<<'           reduce using rule 3
	'>>'           reduce using rule 3


State 65

	Char -> L_charac .                                  (rule 4)

	')'            reduce using rule 4
	','            reduce using rule 4
	';'            reduce using rule 4
	'<<'           reduce using rule 4
	'>>'           reduce using rule 4


State 66

	String -> L_quoted .                                (rule 5)

	')'            reduce using rule 5
	','            reduce using rule 5
	';'            reduce using rule 5
	'<<'           reduce using rule 5
	'>>'           reduce using rule 5


State 67

	Stm -> '{' ListStm . '}'                            (rule 34)

	'}'            shift, and enter state 84


State 68

	Stm -> 'return' Exp . ';'                           (rule 33)

	';'            shift, and enter state 83


State 69

	Exp15 -> '(' Exp . ')'                              (rule 41)

	')'            shift, and enter state 82


State 70

	Exp10 -> Exp8 '<<' . Exp9                           (rule 43)

	'('            shift, and enter state 60
	')'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	Exp15          goto state 43
	Exp10          goto state 44
	Exp8           goto state 79
	Exp9           goto state 81
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 71

	Exp10 -> Exp8 '>>' . Exp9                           (rule 44)

	'('            shift, and enter state 60
	')'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	'<<'           reduce using rule 61
	'>>'           reduce using rule 61
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 63
	L_doubl        shift, and enter state 64
	L_charac       shift, and enter state 65
	L_quoted       shift, and enter state 66

	Ident          goto state 3
	Integer        goto state 36
	Double         goto state 37
	Char           goto state 38
	String         goto state 39
	Exp15          goto state 43
	Exp10          goto state 44
	Exp8           goto state 79
	Exp9           goto state 80
	Exp11          goto state 55
	Exp12          goto state 56
	Exp13          goto state 57
	Exp14          goto state 58
	Const          goto state 59
	ListIdent      goto state 9

State 72

	Stm -> Exp ';' .                                    (rule 31)

	'('            reduce using rule 31
	';'            reduce using rule 31
	'<<'           reduce using rule 31
	'>>'           reduce using rule 31
	'bool'         reduce using rule 31
	'char'         reduce using rule 31
	'const'        reduce using rule 31
	'double'       reduce using rule 31
	'int'          reduce using rule 31
	'return'       reduce using rule 31
	'void'         reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	L_Ident        reduce using rule 31
	L_integ        reduce using rule 31
	L_doubl        reduce using rule 31
	L_charac       reduce using rule 31
	L_quoted       reduce using rule 31


State 73

	ListStm -> Stm ListStm .                            (rule 17)

	'}'            reduce using rule 17


State 74

	Stm -> Spec Type . ListId ';'                       (rule 32)

	L_Ident        shift, and enter state 2

	Ident          goto state 32
	Id             goto state 77
	ListId         goto state 78

State 75

	Body -> '{' ListStm '}' .                           (rule 14)

	'bool'         reduce using rule 14
	'char'         reduce using rule 14
	'double'       reduce using rule 14
	'int'          reduce using rule 14
	'void'         reduce using rule 14
	L_Ident        reduce using rule 14
	%eof           reduce using rule 14


State 76

	Id -> Ident '=' Exp .                               (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30


State 77

	ListId -> Id .                                      (rule 35)
	ListId -> Id . ',' ListId                           (rule 36)

	','            shift, and enter state 86
	';'            reduce using rule 35


State 78

	Stm -> Spec Type ListId . ';'                       (rule 32)

	';'            shift, and enter state 85


State 79

	Exp10 -> Exp8 . '<<' Exp9                           (rule 43)
	Exp10 -> Exp8 . '>>' Exp9                           (rule 44)

	'<<'           shift, and enter state 70
	'>>'           shift, and enter state 71


State 80

	Exp10 -> Exp8 '>>' Exp9 .                           (rule 44)
	Exp8 -> Exp9 .                                      (rule 54)

	')'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	'<<'           reduce using rule 54
			(reduce using rule 44)

	'>>'           reduce using rule 54
			(reduce using rule 44)



State 81

	Exp10 -> Exp8 '<<' Exp9 .                           (rule 43)
	Exp8 -> Exp9 .                                      (rule 54)

	')'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'<<'           reduce using rule 54
			(reduce using rule 43)

	'>>'           reduce using rule 54
			(reduce using rule 43)



State 82

	Exp15 -> '(' Exp ')' .                              (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	'<<'           reduce using rule 41
	'>>'           reduce using rule 41


State 83

	Stm -> 'return' Exp ';' .                           (rule 33)

	'('            reduce using rule 33
	';'            reduce using rule 33
	'<<'           reduce using rule 33
	'>>'           reduce using rule 33
	'bool'         reduce using rule 33
	'char'         reduce using rule 33
	'const'        reduce using rule 33
	'double'       reduce using rule 33
	'int'          reduce using rule 33
	'return'       reduce using rule 33
	'void'         reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	L_Ident        reduce using rule 33
	L_integ        reduce using rule 33
	L_doubl        reduce using rule 33
	L_charac       reduce using rule 33
	L_quoted       reduce using rule 33


State 84

	Stm -> '{' ListStm '}' .                            (rule 34)

	'('            reduce using rule 34
	';'            reduce using rule 34
	'<<'           reduce using rule 34
	'>>'           reduce using rule 34
	'bool'         reduce using rule 34
	'char'         reduce using rule 34
	'const'        reduce using rule 34
	'double'       reduce using rule 34
	'int'          reduce using rule 34
	'return'       reduce using rule 34
	'void'         reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	L_Ident        reduce using rule 34
	L_integ        reduce using rule 34
	L_doubl        reduce using rule 34
	L_charac       reduce using rule 34
	L_quoted       reduce using rule 34


State 85

	Stm -> Spec Type ListId ';' .                       (rule 32)

	'('            reduce using rule 32
	';'            reduce using rule 32
	'<<'           reduce using rule 32
	'>>'           reduce using rule 32
	'bool'         reduce using rule 32
	'char'         reduce using rule 32
	'const'        reduce using rule 32
	'double'       reduce using rule 32
	'int'          reduce using rule 32
	'return'       reduce using rule 32
	'void'         reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	L_Ident        reduce using rule 32
	L_integ        reduce using rule 32
	L_doubl        reduce using rule 32
	L_charac       reduce using rule 32
	L_quoted       reduce using rule 32


State 86

	ListId -> Id ',' . ListId                           (rule 36)

	L_Ident        shift, and enter state 2

	Ident          goto state 32
	Id             goto state 77
	ListId         goto state 87

State 87

	ListId -> Id ',' ListId .                           (rule 36)

	';'            reduce using rule 36


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 64
Number of terminals: 22
Number of non-terminals: 37
Number of states: 88
