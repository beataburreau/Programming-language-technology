-- Program
entrypoints Program ;
PDefs. Program ::= [Def] ; 
terminator Def "" ;

-- Comments
comment "//" ;
comment "#" ;
comment "/*" "*/" ;

-- Function
DFunc. Def ::= Type Ident "(" [Arg] ")" Body ;
separator Arg "," ; 
FBody. Body ::= "{" [Stm] "}";
EBody. Body ::= ";" ;
terminator Stm "" ;

TInt. Type ::= "int" ;
TBool. Type ::= "bool" ;
TChar. Type ::= "char" ;
TDouble. Type ::= "double" ;
TVoid. Type ::= "void" ;

ADecl. Arg ::= Spec Type AId ;
CSpec. Spec ::= "const" ;
ESpec. Spec ::= "" ;
SId. AId ::= Id ;
EId. AId ::= "" ;
VDecl. Id ::= Ident ;
VInit. Id ::= Ident "=" Exp ;

SExp. Stm ::= Exp ";" ;
SDecl. Stm ::= Spec Type [Id] ";" ;
separator nonempty Id "," ;
SRet. Stm ::= "return" Exp ";" ;
SBlock. Stm ::=  "{" [Stm] "}" ;
-- m.fl.

-- Exp
EInt. Exp15 ::= Integer ;
EDouble. Exp15 ::= Double ;
EChar. Exp15 ::= Char ;
EString. Exp15 ::= [String] ;
separator nonempty String "";

EIndex. Exp14 ::= Exp15 "[" Exp "]" ;

EFuncCall. Exp14 ::= Exp15 "(" [Exp] ")" ;
separator Exp "," ;

EDotOp. Exp14 ::= Exp15 "." Exp16 ;
EArrowOp. Exp14 ::= Exp15 "->" Exp16 ;

ERIncr. Exp14 ::= Exp15 "++" ;
ERDecr. Exp14 ::= Exp15 "--" ;

ELIncr. Exp13 ::= "++" Exp14 ; 
ELDecr. Exp13 ::= "--" Exp14 ; 
EDeref. Exp13 ::= "*" Exp14 ;
ENeg. Exp13 ::=  "!" Exp14 ;

EMul. Exp12 ::= Exp13 "*" Exp14 ;
EDiv. Exp12 ::= Exp13 "/" Exp14 ;
ERem. Exp12 ::= Exp13 "%" Exp14 ;

EAdd. Exp11 ::= Exp12 "+" Exp13 ;
ESub. Exp11 ::= Exp12 "-" Exp13 ;

ELShift. Exp10 ::= Exp11 "<<" Exp12 ;
ERShift. Exp10 ::= Exp11 ">>" Exp12 ;

ELess. Exp9 ::= Exp10 "<" Exp11 ;
EGreat. Exp9 ::= Exp10 ">" Exp11 ; 
ELEq. Exp9 ::= Exp10 "<=" Exp11 ;
EGEq. Exp9 ::= Exp10 ">=" Exp11 ;

EEq. Exp8 ::= Exp9 "==" Exp10 ;
EInEq. Exp8 ::= Exp9 "!=" Exp10 ;

EConj. Exp4 ::= Exp5 "&&" Exp6 ;

EDisj. Exp3 ::= Exp4 "||" Exp5 ; 

EAss. Exp2 ::= Exp4 "=" Exp3 ;
EIncrease. Exp2 ::= Exp4 "+=" Exp3 ;
EDecrease. Exp2 ::= Exp4 "-=" Exp3 ;

ECond. Exp2 ::= Exp4 "?" Exp4 ":" Exp3 ;

EException. Exp1 ::= "throw" Exp2 ;

coercions Exp 16 ;

-- QConst
EConst. Exp15 ::= Const ;
DConst. Def ::= Const ;
TConst. Type ::= Const ;
QConst. Const ::= [Ident];
separator nonempty Ident "::" ; 
