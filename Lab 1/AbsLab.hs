-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module AbsLab where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = DFunc Type Ident [Arg] Body | DConst Const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Body = FBody [Stm] | EBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = TInt | TBool | TChar | TDouble | TVoid | TConst Const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ADecl Spec Type AId
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Spec = CSpec | ESpec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AId = SId Id | EId
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Id = VDecl Ident | VInit Ident Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SExp Exp | SDecl Spec Type [Id] | SRet Exp | SBlock [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EChar Char
    | EString String
    | ELShift Exp Exp
    | ERShift Exp Exp
    | EConst Const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Const = QConst [Ident]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

